{
  "nav": {
    "about": "About",
    "projects": "Projects",
    "contact": "Contact"
  },
  "introduce": {
    "hi": "Hi there!",
    "im": "I'm",
    "firstname": "Valentin",
    "lastname": "HIPPOLYTE",
    "cv": "my cv"
  },
  "aboutMe": {
    "title1": "ABOUT",
    "title2": "ME",
    "who": "WHO AM I?",
    "skills": "SKILLS",
    "presentation1": "Hello, my name is Valentin HIPPOLYTE, a motivated and dynamic developer with a Master’s degree in Computer Engineering.",
    "presentation2": "After three years of apprenticeship at Worldline, where I developed features for international banking clients, I am now looking for a new professional challenge.",
    "languages": "Languages & Frameworks:",
    "tools": "Tools & Workflow:"
  },
  "projects": {
    "title1": "SOME",
    "title2": "PROJECTS",
    "description": {
      "casa-cal-y-sol": "A showcase site for a vacation home in Andalusia with an integrated booking system.",
      "ghiblix": "An app to discover and manage Ghibli films: add to favorites, track views, and explore films.",
      "full-stack-boilerplate": "A minimal full-stack application template designed to serve as a starting point, containerized with Docker."
    },
    "project-info": {
      "casa-cal-y-sol": {
        "description": "Casa Cal y Sol is a showcase website I'm building for my parents, who fulfilled their dream of moving to a white village in Andalusia. The site allows visitors to explore their holiday home, check availability, and book a stay in a warm and authentic atmosphere.",
        "features": {
          "1": "Development of the site based on a personalized graphic charter",
          "2": "Availability calendar synchronized with Smoobu",
          "3": "Contact and booking form",
          "4": "Multilingual version with translation management (Vue I18n)"
        },
        "challenge": "Integrating and customizing the Smoobu API to display a synced calendar without using their default widget helped me deepen my understanding of third-party API integration and the importance of user experience in a project aimed at non-tech users."
      },
      "ghiblix": {
        "description": "Ghiblix is a Full Stack app I developed for a friend who’s a big Studio Ghibli fan — and for myself to discover its films and track the ones I've already watched. The goal: offer a simple and elegant interface to browse the studio's works, view film details, and mark those you’ve seen.",
        "features": {
          "1": "Complete list of Studio Ghibli movies, with posters, titles, and summaries",
          "2": "Ability to mark movies as 'watched' to track your progress",
          "3": "Detailed movie pages with description, release date, director, etc.",
          "4": "Sign up / login with JWT to manage a personal profile and save your data"
        },
        "challenge": "One of the challenges was managing user state (watched movies) in a secure and persistent way. I implemented JWT authentication and a REST API to let users access their personal watchlist. This project helped me structure a full Full Stack architecture (front, back, DB) and practice a solid Git workflow, even solo."
      },
      "full-stack-boilerplate": {
        "description": "This project is a minimal full-stack application boilerplate designed to be a flexible starting point for building full-stack web applications. The app is structured with a clear separation between the front-end and back-end, allowing for easy scaling and customization. Docker is used to containerize the application, simplifying deployment and ensuring consistency across different environments.",
        "features": {
          "1": "Scalable, customizable full-stack app structure",
          "2": "JWT-based user authentication for secure access",
          "3": "Easy-to-use development environment with Docker containers for front-end, back-end, and database",
          "4": "Configuration of services (front-end, back-end, and MongoDB) in a single docker-compose.yml file"
        },
        "challenge": "I created a reusable full-stack boilerplate to deepen my understanding of Docker and multi-container environments. It simplifies local development with a clear integration between front-end, back-end, and database."
      },
      "main_features": "Main Features",
      "challenges": "Challenges",
      "previous": "previous",
      "next": "next",
      "profile": "profile"
    }
  },
  "contactMe": {
    "title1": "CONTACT",
    "title2": "ME",
    "phone": {
      "title": "Phone",
      "value": "+33 6 61 08 62 20"
    },
    "mail": {
      "title": "Email"
    },
    "address": {
      "title": "Address",
      "value": "Montpellier and around"
    },
    "follow": "Follow",
    "me": "me"
  },
  "rights": "All rights reserved"
}
